import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of AddArtworkMutation */
export type AddArtworkMutationInput = {
  attributes: ArtworkAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddArtworkMutation */
export type AddArtworkMutationPayload = {
  __typename?: 'AddArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** An artwork */
export type Artwork = {
  __typename?: 'Artwork';
  attachments: Array<Attachment>;
  collector_byline?: Maybe<Scalars['String']>;
  created_at: Scalars['String'];
  depth?: Maybe<Scalars['Float']>;
  description?: Maybe<Scalars['String']>;
  dimensions?: Maybe<Dimensions>;
  duration?: Maybe<Scalars['String']>;
  editions: Array<Edition>;
  embeds: Array<Embed>;
  gloss?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  images: Array<Image>;
  intent: Scalars['String'];
  links: Array<Link>;
  material?: Maybe<Scalars['String']>;
  position: Scalars['Int'];
  slug: Scalars['String'];
  src?: Maybe<Scalars['String']>;
  state: Scalars['String'];
  title: Scalars['String'];
  unit?: Maybe<Scalars['String']>;
  updated_at: Scalars['String'];
  width?: Maybe<Scalars['Float']>;
  year: Scalars['Int'];
};


/** An artwork */
export type ArtworkCreated_AtArgs = {
  relative?: Maybe<Scalars['Boolean']>;
  format?: Maybe<Scalars['String']>;
};


/** An artwork */
export type ArtworkDescriptionArgs = {
  format?: Maybe<Format>;
};


/** An artwork */
export type ArtworkImagesArgs = {
  state?: Maybe<Array<State>>;
  limit?: Maybe<Scalars['Int']>;
};


/** An artwork */
export type ArtworkLinksArgs = {
  state?: Maybe<Array<State>>;
  kind?: Maybe<Array<Kind>>;
};


/** An artwork */
export type ArtworkUpdated_AtArgs = {
  relative?: Maybe<Scalars['Boolean']>;
  format?: Maybe<Scalars['String']>;
};

export type ArtworkAttributes = {
  title: Scalars['String'];
  year: Scalars['Int'];
  state: State;
  description?: Maybe<Scalars['String']>;
  gloss?: Maybe<Scalars['String']>;
  material?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Float']>;
  depth?: Maybe<Scalars['Float']>;
  unit?: Maybe<Scalars['String']>;
};

/** An attachment */
export type Attachment = {
  __typename?: 'Attachment';
  id: Scalars['String'];
  kind?: Maybe<Scalars['String']>;
  state: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

/** Curriculum Vitae */
export type Cv = {
  __typename?: 'Cv';
  categories: Array<CvCategory>;
};

/** A single category in the CV */
export type CvCategory = {
  __typename?: 'CvCategory';
  name: Scalars['String'];
  years: Array<CvYear>;
};

/** A single row in the CV */
export type CvEntry = {
  __typename?: 'CvEntry';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  to_html: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  venue?: Maybe<Scalars['String']>;
};

/** A single year in the CV */
export type CvYear = {
  __typename?: 'CvYear';
  entries: Array<CvEntry>;
  year: Scalars['Int'];
};

/** Dimensions */
export type Dimension = {
  __typename?: 'Dimension';
  depth?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Float']>;
  to_s?: Maybe<Scalars['String']>;
  unit?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

/** Dimensions in metric and imperial */
export type Dimensions = {
  __typename?: 'Dimensions';
  centimeters: Dimension;
  inches: Dimension;
};

/** An edition */
export type Edition = {
  __typename?: 'Edition';
  collector?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  is_attributable: Scalars['Boolean'];
  location?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  state: Scalars['String'];
};

/** An embed */
export type Embed = {
  __typename?: 'Embed';
  html?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

/** An exhibition */
export type Exhibition = {
  __typename?: 'Exhibition';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  created_at: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  end_date?: Maybe<Scalars['String']>;
  external_url?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  images: Array<Image>;
  kind: Scalars['String'];
  slug?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updated_at: Scalars['String'];
  venue?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};


/** An exhibition */
export type ExhibitionCreated_AtArgs = {
  relative?: Maybe<Scalars['Boolean']>;
  format?: Maybe<Scalars['String']>;
};


/** An exhibition */
export type ExhibitionDescriptionArgs = {
  format?: Maybe<Format>;
};


/** An exhibition */
export type ExhibitionEnd_DateArgs = {
  relative?: Maybe<Scalars['Boolean']>;
  format?: Maybe<Scalars['String']>;
};


/** An exhibition */
export type ExhibitionImagesArgs = {
  state?: Maybe<Array<State>>;
  limit?: Maybe<Scalars['Int']>;
};


/** An exhibition */
export type ExhibitionStart_DateArgs = {
  relative?: Maybe<Scalars['Boolean']>;
  format?: Maybe<Scalars['String']>;
};


/** An exhibition */
export type ExhibitionUpdated_AtArgs = {
  relative?: Maybe<Scalars['Boolean']>;
  format?: Maybe<Scalars['String']>;
};

export enum Format {
  Plain = 'PLAIN',
  Html = 'HTML'
}

/** An image */
export type Image = {
  __typename?: 'Image';
  description?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  largest_side_display_size?: Maybe<Scalars['Int']>;
  position: Scalars['Int'];
  resized: ResizedImage;
  scale?: Maybe<Scalars['Float']>;
  state: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
  width?: Maybe<Scalars['Int']>;
};


/** An image */
export type ImageResizedArgs = {
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  scale?: Maybe<Scalars['Float']>;
  quality?: Maybe<Scalars['Int']>;
  blur?: Maybe<Scalars['Float']>;
  sharpen?: Maybe<Scalars['Float']>;
};

export enum Kind {
  Default = 'DEFAULT',
  Canonical = 'CANONICAL'
}

/** A link */
export type Link = {
  __typename?: 'Link';
  id: Scalars['String'];
  kind: Scalars['String'];
  state: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  add_artwork?: Maybe<AddArtworkMutationPayload>;
  update_artwork?: Maybe<UpdateArtworkMutationPayload>;
};


export type MutationAdd_ArtworkArgs = {
  input: AddArtworkMutationInput;
};


export type MutationUpdate_ArtworkArgs = {
  input: UpdateArtworkMutationInput;
};

/** The query root for this schema */
export type Query = {
  __typename?: 'Query';
  /** An artwork */
  artwork: Artwork;
  artworks: Array<Artwork>;
  cv: Cv;
  /** An exhibition */
  exhibition: Exhibition;
  exhibitions: Array<Exhibition>;
  presigned_upload_urls: Array<Scalars['String']>;
  /** An representation */
  representation: Representation;
  representations: Array<Representation>;
  /** System status */
  status: Status;
};


/** The query root for this schema */
export type QueryArtworkArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryArtworksArgs = {
  state?: Maybe<Array<Maybe<State>>>;
};


/** The query root for this schema */
export type QueryExhibitionArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryExhibitionsArgs = {
  state?: Maybe<Array<Maybe<State>>>;
};


/** The query root for this schema */
export type QueryPresigned_Upload_UrlsArgs = {
  types: Array<SupportedUpload>;
};


/** The query root for this schema */
export type QueryRepresentationArgs = {
  id: Scalars['ID'];
};

/** A representation of some other type */
export type Representation = {
  __typename?: 'Representation';
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  images: Array<Image>;
  mode: Scalars['String'];
  position: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

/** A resized image */
export type ResizedImage = {
  __typename?: 'ResizedImage';
  factor: Scalars['Float'];
  height: Scalars['Int'];
  ratio: Scalars['Float'];
  urls: RetinaImage;
  width: Scalars['Int'];
};

/** A retina image */
export type RetinaImage = {
  __typename?: 'RetinaImage';
  _1x: Scalars['String'];
  _2x: Scalars['String'];
  _3x: Scalars['String'];
};

export enum State {
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
  Archived = 'ARCHIVED',
  Selected = 'SELECTED'
}

/** System status */
export type Status = {
  __typename?: 'Status';
  authenticated: Scalars['Boolean'];
  up: Scalars['Boolean'];
};

export enum SupportedUpload {
  Jpeg = 'JPEG',
  Png = 'PNG',
  Gif = 'GIF'
}

export type UpdateArtworkAttributes = {
  title?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
  state?: Maybe<State>;
  description?: Maybe<Scalars['String']>;
  gloss?: Maybe<Scalars['String']>;
  material?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Float']>;
  depth?: Maybe<Scalars['Float']>;
  unit?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateArtworkMutation */
export type UpdateArtworkMutationInput = {
  id: Scalars['ID'];
  attributes: UpdateArtworkAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateArtworkMutation */
export type UpdateArtworkMutationPayload = {
  __typename?: 'UpdateArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Meta_ImageFragment = (
  { __typename?: 'Image' }
  & { resized: (
    { __typename?: 'ResizedImage' }
    & { urls: (
      { __typename?: 'RetinaImage' }
      & { src: RetinaImage['_1x'] }
    ) }
  ) }
);

export type Figure_ImageFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'width' | 'height' | 'url' | 'title' | 'description'>
  & { placeholder: (
    { __typename?: 'ResizedImage' }
    & { urls: (
      { __typename?: 'RetinaImage' }
      & { src: RetinaImage['_1x'] }
    ) }
  ), display: (
    { __typename?: 'ResizedImage' }
    & Pick<ResizedImage, 'width' | 'height'>
    & { srcs: (
      { __typename?: 'RetinaImage' }
      & Pick<RetinaImage, '_1x' | '_2x'>
    ) }
  ), zoom: (
    { __typename?: 'ResizedImage' }
    & { srcs: (
      { __typename?: 'RetinaImage' }
      & Pick<RetinaImage, '_1x'>
    ) }
  ) }
);

export type SearchQueryVariables = Exact<{ [key: string]: never; }>;


export type SearchQuery = (
  { __typename?: 'Query' }
  & { artworks: Array<(
    { __typename?: 'Artwork' }
    & Pick<Artwork, 'id' | 'slug' | 'title'>
  )> }
);

export type Thumbnail_ImageFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'width' | 'height' | 'title' | 'description' | 'url'>
  & { placeholder: (
    { __typename?: 'ResizedImage' }
    & { urls: (
      { __typename?: 'RetinaImage' }
      & { src: RetinaImage['_1x'] }
    ) }
  ), thumb: (
    { __typename?: 'ResizedImage' }
    & Pick<ResizedImage, 'width' | 'height'>
    & { srcs: (
      { __typename?: 'RetinaImage' }
      & Pick<RetinaImage, '_1x' | '_2x' | '_3x'>
    ) }
  ) }
);

export type ThumbnailArtwork_ArtworkFragment = (
  { __typename?: 'Artwork' }
  & Pick<Artwork, 'id' | 'slug' | 'title' | 'material' | 'year'>
  & { images: Array<(
    { __typename?: 'Image' }
    & { placeholder: (
      { __typename?: 'ResizedImage' }
      & { urls: (
        { __typename?: 'RetinaImage' }
        & { src: RetinaImage['_1x'] }
      ) }
    ), resized: (
      { __typename?: 'ResizedImage' }
      & Pick<ResizedImage, 'width' | 'height'>
      & { urls: (
        { __typename?: 'RetinaImage' }
        & Pick<RetinaImage, '_1x' | '_2x' | '_3x'>
      ) }
    ) }
  )> }
);

export type Tombstone_ArtworkFragment = (
  { __typename?: 'Artwork' }
  & Pick<Artwork, 'title' | 'material' | 'duration' | 'year' | 'collector_byline'>
  & { dimensions?: Maybe<(
    { __typename?: 'Dimensions' }
    & { inches: (
      { __typename?: 'Dimension' }
      & Pick<Dimension, 'to_s'>
    ), centimeters: (
      { __typename?: 'Dimension' }
      & Pick<Dimension, 'to_s'>
    ) }
  )> }
);

export type ArtworksShowQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ArtworksShowQuery = (
  { __typename?: 'Query' }
  & { artwork: (
    { __typename?: 'Artwork' }
    & Pick<Artwork, 'id' | 'slug' | 'src' | 'title' | 'year' | 'intent' | 'description'>
    & { descriptionPlain: Artwork['description'] }
    & { attachments: Array<(
      { __typename?: 'Attachment' }
      & Pick<Attachment, 'id' | 'url' | 'title'>
    )>, links: Array<(
      { __typename?: 'Link' }
      & Pick<Link, 'title' | 'url'>
    )>, embeds: Array<(
      { __typename?: 'Embed' }
      & Pick<Embed, 'id' | 'html'>
    )>, images: Array<(
      { __typename?: 'Image' }
      & Pick<Image, 'id'>
      & Figure_ImageFragment
      & Thumbnail_ImageFragment
    )>, metaImages: Array<(
      { __typename?: 'Image' }
      & Meta_ImageFragment
    )> }
    & Tombstone_ArtworkFragment
  ) }
);

export type ArtworkSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type ArtworkSlugsQuery = (
  { __typename?: 'Query' }
  & { artworks: Array<(
    { __typename?: 'Artwork' }
    & Pick<Artwork, 'slug'>
  )> }
);

export type CvPageQueryVariables = Exact<{ [key: string]: never; }>;


export type CvPageQuery = (
  { __typename?: 'Query' }
  & { cv: (
    { __typename?: 'Cv' }
    & { categories: Array<(
      { __typename?: 'CvCategory' }
      & Pick<CvCategory, 'name'>
      & { years: Array<(
        { __typename?: 'CvYear' }
        & Pick<CvYear, 'year'>
        & { entries: Array<(
          { __typename?: 'CvEntry' }
          & Pick<CvEntry, 'title' | 'city' | 'country' | 'notes' | 'region' | 'url' | 'venue' | 'to_html'>
        )> }
      )> }
    )> }
  ) }
);

export type ExhibitionsIndexQueryVariables = Exact<{ [key: string]: never; }>;


export type ExhibitionsIndexQuery = (
  { __typename?: 'Query' }
  & { exhibitions: Array<(
    { __typename?: 'Exhibition' }
    & Pick<Exhibition, 'id' | 'slug' | 'title' | 'city' | 'year'>
    & { images: Array<(
      { __typename?: 'Image' }
      & { placeholder: (
        { __typename?: 'ResizedImage' }
        & { urls: (
          { __typename?: 'RetinaImage' }
          & { src: RetinaImage['_1x'] }
        ) }
      ), resized: (
        { __typename?: 'ResizedImage' }
        & Pick<ResizedImage, 'width' | 'height'>
        & { urls: (
          { __typename?: 'RetinaImage' }
          & Pick<RetinaImage, '_1x' | '_2x' | '_3x'>
        ) }
      ) }
    )> }
  )> }
);

export type ExhibitionsShowQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ExhibitionsShowQuery = (
  { __typename?: 'Query' }
  & { exhibition: (
    { __typename?: 'Exhibition' }
    & Pick<Exhibition, 'title' | 'venue' | 'city' | 'year' | 'start_date' | 'end_date' | 'external_url' | 'description'>
    & { start_year: Exhibition['start_date'], end_year: Exhibition['end_date'], descriptionPlain: Exhibition['description'] }
    & { images: Array<(
      { __typename?: 'Image' }
      & Pick<Image, 'id'>
      & Thumbnail_ImageFragment
    )>, metaImages: Array<(
      { __typename?: 'Image' }
      & Meta_ImageFragment
    )> }
  ) }
);

export type ExhibitionSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type ExhibitionSlugsQuery = (
  { __typename?: 'Query' }
  & { exhibitions: Array<(
    { __typename?: 'Exhibition' }
    & Pick<Exhibition, 'slug'>
  )> }
);

export type ArtworksTableQueryVariables = Exact<{ [key: string]: never; }>;


export type ArtworksTableQuery = (
  { __typename?: 'Query' }
  & { artworks: Array<(
    { __typename?: 'Artwork' }
    & Pick<Artwork, 'id' | 'slug' | 'title' | 'material' | 'year'>
  )> }
);

export type WebsitesQueryVariables = Exact<{ [key: string]: never; }>;


export type WebsitesQuery = (
  { __typename?: 'Query' }
  & { artworks: Array<(
    { __typename?: 'Artwork' }
    & Pick<Artwork, 'id'>
    & { links: Array<(
      { __typename?: 'Link' }
      & Pick<Link, 'kind' | 'url'>
    )> }
  )> }
);

export type ArtworksIndexQueryVariables = Exact<{
  state?: Maybe<Array<Maybe<State>> | Maybe<State>>;
}>;


export type ArtworksIndexQuery = (
  { __typename?: 'Query' }
  & { artworks: Array<(
    { __typename?: 'Artwork' }
    & Pick<Artwork, 'id'>
    & ThumbnailArtwork_ArtworkFragment
  )> }
);

export const Meta_ImageFragmentDoc = gql`
    fragment Meta_image on Image {
  resized(width: 1200, height: 630) {
    urls {
      src: _1x
    }
  }
}
    `;
export const Figure_ImageFragmentDoc = gql`
    fragment Figure_image on Image {
  id
  width
  height
  url
  title
  description
  placeholder: resized(width: 50, height: 50, blur: 10) {
    urls {
      src: _1x
    }
  }
  display: resized(width: 1200, height: 1200) {
    width
    height
    srcs: urls {
      _1x
      _2x
    }
  }
  zoom: resized(width: 4000, height: 4000, quality: 60) {
    srcs: urls {
      _1x
    }
  }
}
    `;
export const Thumbnail_ImageFragmentDoc = gql`
    fragment Thumbnail_image on Image {
  width
  height
  title
  description
  url
  placeholder: resized(width: 50, height: 50, blur: 10) {
    urls {
      src: _1x
    }
  }
  thumb: resized(width: 200, height: 200) {
    width
    height
    srcs: urls {
      _1x
      _2x
      _3x
    }
  }
}
    `;
export const ThumbnailArtwork_ArtworkFragmentDoc = gql`
    fragment ThumbnailArtwork_artwork on Artwork {
  id
  slug
  title
  material
  year
  images(limit: 1, state: PUBLISHED) {
    placeholder: resized(width: 50, height: 50, blur: 10) {
      urls {
        src: _1x
      }
    }
    resized(width: 200, height: 200) {
      width
      height
      urls {
        _1x
        _2x
        _3x
      }
    }
  }
}
    `;
export const Tombstone_ArtworkFragmentDoc = gql`
    fragment Tombstone_artwork on Artwork {
  title
  material
  duration
  year
  dimensions {
    inches {
      to_s
    }
    centimeters {
      to_s
    }
  }
  collector_byline
}
    `;
export const SearchQueryDocument = gql`
    query SearchQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    slug
    title
  }
}
    `;

export function useSearchQuery(options?: Omit<Urql.UseQueryArgs<SearchQueryVariables>, 'query'>) {
  return Urql.useQuery<SearchQuery>({ query: SearchQueryDocument, ...options });
};
export const ArtworksShowQueryDocument = gql`
    query ArtworksShowQuery($id: ID!) {
  artwork(id: $id) {
    ...Tombstone_artwork
    id
    slug
    src
    title
    year
    intent
    description(format: HTML)
    descriptionPlain: description(format: PLAIN)
    attachments {
      id
      url
      title
    }
    links(kind: DEFAULT, state: PUBLISHED) {
      title
      url
    }
    embeds {
      id
      html
    }
    images(state: [SELECTED, PUBLISHED]) {
      id
      ...Figure_image
      ...Thumbnail_image
    }
    metaImages: images(state: PUBLISHED, limit: 1) {
      ...Meta_image
    }
  }
}
    ${Tombstone_ArtworkFragmentDoc}
${Figure_ImageFragmentDoc}
${Thumbnail_ImageFragmentDoc}
${Meta_ImageFragmentDoc}`;

export function useArtworksShowQuery(options: Omit<Urql.UseQueryArgs<ArtworksShowQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworksShowQuery>({ query: ArtworksShowQueryDocument, ...options });
};
export const ArtworkSlugsQueryDocument = gql`
    query ArtworkSlugsQuery {
  artworks {
    slug
  }
}
    `;

export function useArtworkSlugsQuery(options?: Omit<Urql.UseQueryArgs<ArtworkSlugsQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworkSlugsQuery>({ query: ArtworkSlugsQueryDocument, ...options });
};
export const CvPageQueryDocument = gql`
    query CvPageQuery {
  cv {
    categories {
      name
      years {
        year
        entries {
          title
          city
          country
          notes
          region
          url
          venue
          to_html
        }
      }
    }
  }
}
    `;

export function useCvPageQuery(options?: Omit<Urql.UseQueryArgs<CvPageQueryVariables>, 'query'>) {
  return Urql.useQuery<CvPageQuery>({ query: CvPageQueryDocument, ...options });
};
export const ExhibitionsIndexQueryDocument = gql`
    query ExhibitionsIndexQuery {
  exhibitions(state: [SELECTED, PUBLISHED]) {
    id
    slug
    title
    city
    year
    images(limit: 1, state: PUBLISHED) {
      placeholder: resized(width: 50, height: 50, blur: 10) {
        urls {
          src: _1x
        }
      }
      resized(width: 200, height: 200) {
        width
        height
        urls {
          _1x
          _2x
          _3x
        }
      }
    }
  }
}
    `;

export function useExhibitionsIndexQuery(options?: Omit<Urql.UseQueryArgs<ExhibitionsIndexQueryVariables>, 'query'>) {
  return Urql.useQuery<ExhibitionsIndexQuery>({ query: ExhibitionsIndexQueryDocument, ...options });
};
export const ExhibitionsShowQueryDocument = gql`
    query ExhibitionsShowQuery($id: ID!) {
  exhibition(id: $id) {
    title
    venue
    city
    year
    start_date(format: "%B %e")
    end_date(format: "%B %e")
    start_year: start_date(format: "%Y")
    end_year: end_date(format: "%Y")
    external_url
    description(format: HTML)
    descriptionPlain: description(format: PLAIN)
    images(state: [SELECTED, PUBLISHED]) {
      id
      ...Thumbnail_image
    }
    metaImages: images(state: [SELECTED, PUBLISHED], limit: 1) {
      ...Meta_image
    }
  }
}
    ${Thumbnail_ImageFragmentDoc}
${Meta_ImageFragmentDoc}`;

export function useExhibitionsShowQuery(options: Omit<Urql.UseQueryArgs<ExhibitionsShowQueryVariables>, 'query'>) {
  return Urql.useQuery<ExhibitionsShowQuery>({ query: ExhibitionsShowQueryDocument, ...options });
};
export const ExhibitionSlugsQueryDocument = gql`
    query ExhibitionSlugsQuery {
  exhibitions {
    slug
  }
}
    `;

export function useExhibitionSlugsQuery(options?: Omit<Urql.UseQueryArgs<ExhibitionSlugsQueryVariables>, 'query'>) {
  return Urql.useQuery<ExhibitionSlugsQuery>({ query: ExhibitionSlugsQueryDocument, ...options });
};
export const ArtworksTableQueryDocument = gql`
    query ArtworksTableQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    slug
    title
    material
    year
  }
}
    `;

export function useArtworksTableQuery(options?: Omit<Urql.UseQueryArgs<ArtworksTableQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworksTableQuery>({ query: ArtworksTableQueryDocument, ...options });
};
export const WebsitesQueryDocument = gql`
    query WebsitesQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    links {
      kind
      url
    }
  }
}
    `;

export function useWebsitesQuery(options?: Omit<Urql.UseQueryArgs<WebsitesQueryVariables>, 'query'>) {
  return Urql.useQuery<WebsitesQuery>({ query: WebsitesQueryDocument, ...options });
};
export const ArtworksIndexQueryDocument = gql`
    query ArtworksIndexQuery($state: [State]) {
  artworks(state: $state) {
    id
    ...ThumbnailArtwork_artwork
  }
}
    ${ThumbnailArtwork_ArtworkFragmentDoc}`;

export function useArtworksIndexQuery(options?: Omit<Urql.UseQueryArgs<ArtworksIndexQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworksIndexQuery>({ query: ArtworksIndexQueryDocument, ...options });
};