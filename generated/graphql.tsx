import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ISO8601Date: any;
};

/** Autogenerated input type of AddArtworkEntityMutation */
export type AddArtworkEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: ArtworkEntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of AddArtworkEntityMutation. */
export type AddArtworkEntityMutationPayload = {
  __typename?: 'AddArtworkEntityMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddArtworkMutation */
export type AddArtworkMutationInput = {
  attributes: ArtworkAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of AddArtworkMutation. */
export type AddArtworkMutationPayload = {
  __typename?: 'AddArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddArtworkToTagMutation */
export type AddArtworkToTagMutationInput = {
  artworkId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  tagId: Scalars['ID'];
};

/** Autogenerated return type of AddArtworkToTagMutation. */
export type AddArtworkToTagMutationPayload = {
  __typename?: 'AddArtworkToTagMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Tag;
};

/** Autogenerated input type of AddExhibitionEntityMutation */
export type AddExhibitionEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: ExhibitionEntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of AddExhibitionEntityMutation. */
export type AddExhibitionEntityMutationPayload = {
  __typename?: 'AddExhibitionEntityMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  exhibition: Exhibition;
};

/** Autogenerated input type of AddExhibitionMutation */
export type AddExhibitionMutationInput = {
  attributes: ExhibitionAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of AddExhibitionMutation. */
export type AddExhibitionMutationPayload = {
  __typename?: 'AddExhibitionMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  exhibition: Exhibition;
};

/** Autogenerated input type of AddTagMutation */
export type AddTagMutationInput = {
  attributes: TagAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of AddTagMutation. */
export type AddTagMutationPayload = {
  __typename?: 'AddTagMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Tag;
};

/** An artwork */
export type Artwork = {
  __typename?: 'Artwork';
  attachments: Array<Attachment>;
  collector_byline?: Maybe<Scalars['String']>;
  completeness_score: Scalars['Int'];
  created_at: Scalars['String'];
  depth?: Maybe<Scalars['Float']>;
  description?: Maybe<Scalars['String']>;
  dimensions?: Maybe<Dimensions>;
  duration?: Maybe<Scalars['String']>;
  editions: Array<Edition>;
  embeds: Array<Embed>;
  gloss?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  images: Array<Image>;
  intent: ArtworkIntent;
  is_available: Scalars['Boolean'];
  is_sold: Scalars['Boolean'];
  is_sold_out: Scalars['Boolean'];
  links: Array<Link>;
  material?: Maybe<Scalars['String']>;
  next?: Maybe<Artwork>;
  pitch?: Maybe<Scalars['String']>;
  position: Scalars['Int'];
  previous?: Maybe<Artwork>;
  slug: Scalars['String'];
  src?: Maybe<Scalars['String']>;
  state: State;
  title: Scalars['String'];
  unit?: Maybe<Scalars['String']>;
  updated_at: Scalars['String'];
  width?: Maybe<Scalars['Float']>;
  year: Scalars['Int'];
};


/** An artwork */
export type ArtworkCreated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An artwork */
export type ArtworkDescriptionArgs = {
  format?: InputMaybe<Format>;
};


/** An artwork */
export type ArtworkImagesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<Array<State>>;
};


/** An artwork */
export type ArtworkLinksArgs = {
  kind?: InputMaybe<Array<Kind>>;
  state?: InputMaybe<Array<State>>;
};


/** An artwork */
export type ArtworkNextArgs = {
  state?: InputMaybe<Array<InputMaybe<State>>>;
};


/** An artwork */
export type ArtworkPreviousArgs = {
  state?: InputMaybe<Array<InputMaybe<State>>>;
};


/** An artwork */
export type ArtworkUpdated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};

export type ArtworkAttributes = {
  depth?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  gloss?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  material?: InputMaybe<Scalars['String']>;
  pitch?: InputMaybe<Scalars['String']>;
  state: State;
  title: Scalars['String'];
  unit?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Float']>;
  year: Scalars['Int'];
};

export type ArtworkEntityAttributes = {
  attachment?: InputMaybe<AttachmentAttributes>;
  edition?: InputMaybe<EditionAttributes>;
  embed?: InputMaybe<EmbedAttributes>;
  image?: InputMaybe<ImageAttributes>;
  link?: InputMaybe<LinkAttributes>;
};

export enum ArtworkIntent {
  Canonical = 'CANONICAL',
  Default = 'DEFAULT',
  Embed = 'EMBED'
}

/** An attachment */
export type Attachment = {
  __typename?: 'Attachment';
  file_extension: Scalars['String'];
  file_name: Scalars['String'];
  file_type: Scalars['String'];
  id: Scalars['String'];
  state: State;
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

export type AttachmentAttributes = {
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
};

export type CredentialsAttributes = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export enum Currency {
  Eur = 'EUR',
  Usd = 'USD'
}

/** Curriculum Vitae */
export type Cv = {
  __typename?: 'Cv';
  categories: Array<CvCategory>;
};

/** A single category in the CV */
export type CvCategory = {
  __typename?: 'CvCategory';
  name: Scalars['String'];
  years: Array<CvYear>;
};

/** A single row in the CV */
export type CvEntry = {
  __typename?: 'CvEntry';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  to_html: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  venue?: Maybe<Scalars['String']>;
};

/** A single year in the CV */
export type CvYear = {
  __typename?: 'CvYear';
  entries: Array<CvEntry>;
  year: Scalars['Int'];
};

/** Autogenerated input type of DeleteArtworkMutation */
export type DeleteArtworkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteArtworkMutation. */
export type DeleteArtworkMutationPayload = {
  __typename?: 'DeleteArtworkMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  query: Query;
  success: Scalars['Boolean'];
};

/** Autogenerated input type of DeleteExhibitionMutation */
export type DeleteExhibitionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteExhibitionMutation. */
export type DeleteExhibitionMutationPayload = {
  __typename?: 'DeleteExhibitionMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  query: Query;
  success: Scalars['Boolean'];
};

/** Autogenerated input type of DeleteTagMutation */
export type DeleteTagMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteTagMutation. */
export type DeleteTagMutationPayload = {
  __typename?: 'DeleteTagMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

/** Dimensions */
export type Dimension = {
  __typename?: 'Dimension';
  depth?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Float']>;
  to_s?: Maybe<Scalars['String']>;
  unit?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

/** Dimensions in metric and imperial */
export type Dimensions = {
  __typename?: 'Dimensions';
  centimeters: Dimension;
  inches: Dimension;
};

/** An edition */
export type Edition = {
  __typename?: 'Edition';
  collector?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  inventory_number?: Maybe<Scalars['String']>;
  is_attributable: Scalars['Boolean'];
  location?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  price_currency?: Maybe<Currency>;
  production_cost?: Maybe<Scalars['Float']>;
  production_cost_currency?: Maybe<Currency>;
  sold_date?: Maybe<Scalars['String']>;
  sold_price?: Maybe<Scalars['Float']>;
  sold_price_currency?: Maybe<Currency>;
  state: EditionState;
};


/** An edition */
export type EditionSold_DateArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};

export type EditionAttributes = {
  attributable?: InputMaybe<Scalars['Boolean']>;
  collector?: InputMaybe<Scalars['String']>;
  inventory_number?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Int']>;
  price_currency?: InputMaybe<Currency>;
  production_cost?: InputMaybe<Scalars['Int']>;
  production_cost_currency?: InputMaybe<Currency>;
  sold_date?: InputMaybe<Scalars['ISO8601Date']>;
  sold_price?: InputMaybe<Scalars['Int']>;
  sold_price_currency?: InputMaybe<Currency>;
  state?: InputMaybe<EditionState>;
};

export enum EditionState {
  Available = 'AVAILABLE',
  NotForSale = 'NOT_FOR_SALE',
  Sold = 'SOLD'
}

/** An embed */
export type Embed = {
  __typename?: 'Embed';
  html: Scalars['String'];
  id: Scalars['String'];
};

export type EmbedAttributes = {
  html: Scalars['String'];
};

export enum EntityType {
  Attachment = 'ATTACHMENT',
  Edition = 'EDITION',
  Embed = 'EMBED',
  Image = 'IMAGE',
  Link = 'LINK'
}

/** An exhibition */
export type Exhibition = {
  __typename?: 'Exhibition';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  created_at: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  end_date?: Maybe<Scalars['String']>;
  external_url?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  images: Array<Image>;
  kind: ExhibitionKind;
  slug: Scalars['String'];
  start_date?: Maybe<Scalars['String']>;
  state: State;
  title: Scalars['String'];
  updated_at: Scalars['String'];
  venue?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};


/** An exhibition */
export type ExhibitionCreated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An exhibition */
export type ExhibitionDescriptionArgs = {
  format?: InputMaybe<Format>;
};


/** An exhibition */
export type ExhibitionEnd_DateArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An exhibition */
export type ExhibitionImagesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<Array<State>>;
};


/** An exhibition */
export type ExhibitionStart_DateArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An exhibition */
export type ExhibitionUpdated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};

export type ExhibitionAttributes = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['ISO8601Date']>;
  external_url?: InputMaybe<Scalars['String']>;
  kind: ExhibitionKind;
  start_date?: InputMaybe<Scalars['ISO8601Date']>;
  state: State;
  title: Scalars['String'];
  venue?: InputMaybe<Scalars['String']>;
};

export type ExhibitionEntityAttributes = {
  image?: InputMaybe<ImageAttributes>;
};

export enum ExhibitionKind {
  Group = 'GROUP',
  Solo = 'SOLO'
}

export enum Format {
  Html = 'HTML',
  Plain = 'PLAIN'
}

/** Autogenerated input type of GenerateTokenMutation */
export type GenerateTokenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  credentials: CredentialsAttributes;
};

/** Autogenerated return type of GenerateTokenMutation. */
export type GenerateTokenMutationPayload = {
  __typename?: 'GenerateTokenMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** When the token expires */
  expires_at?: Maybe<Scalars['String']>;
  /** Token that can be used to obtain a new JWT token */
  refresh_token?: Maybe<Scalars['String']>;
  /** The JWT token if authentication is successful */
  token?: Maybe<Scalars['String']>;
};

/** An image */
export type Image = {
  __typename?: 'Image';
  description?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  largest_side_display_size?: Maybe<Scalars['Int']>;
  position?: Maybe<Scalars['Int']>;
  resized: ResizedImage;
  scale?: Maybe<Scalars['Float']>;
  state: State;
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
  width?: Maybe<Scalars['Int']>;
};


/** An image */
export type ImageResizedArgs = {
  blur?: InputMaybe<Scalars['Float']>;
  height?: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  scale?: InputMaybe<Scalars['Float']>;
  sharpen?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type ImageAttributes = {
  description?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  largest_side_display_size?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export enum Kind {
  Canonical = 'CANONICAL',
  Default = 'DEFAULT'
}

/** A link */
export type Link = {
  __typename?: 'Link';
  id: Scalars['String'];
  kind: Kind;
  state: State;
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};


/** A link */
export type LinkUrlArgs = {
  pretty?: InputMaybe<Scalars['Boolean']>;
};

export type LinkAttributes = {
  kind?: InputMaybe<Kind>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  add_artwork?: Maybe<AddArtworkMutationPayload>;
  add_artwork_entity?: Maybe<AddArtworkEntityMutationPayload>;
  add_artwork_to_tag?: Maybe<AddArtworkToTagMutationPayload>;
  add_exhibition?: Maybe<AddExhibitionMutationPayload>;
  add_exhibition_entity?: Maybe<AddExhibitionEntityMutationPayload>;
  add_tag?: Maybe<AddTagMutationPayload>;
  delete_artwork?: Maybe<DeleteArtworkMutationPayload>;
  delete_exhibition?: Maybe<DeleteExhibitionMutationPayload>;
  delete_tag?: Maybe<DeleteTagMutationPayload>;
  generate_token?: Maybe<GenerateTokenMutationPayload>;
  remove_artwork_entity?: Maybe<RemoveArtworkEntityMutationPayload>;
  remove_artwork_from_tag?: Maybe<RemoveArtworkFromTagMutationPayload>;
  remove_exhibition_entity?: Maybe<RemoveExhibitionEntityMutationPayload>;
  renew_token?: Maybe<RenewTokenMutationPayload>;
  reorder_artwork?: Maybe<ReorderArtworkMutationPayload>;
  reorder_image?: Maybe<ReorderImageMutationPayload>;
  update_artwork?: Maybe<UpdateArtworkMutationPayload>;
  update_artwork_entity?: Maybe<UpdateArtworkEntityMutationPayload>;
  update_exhibition?: Maybe<UpdateExhibitionMutationPayload>;
  update_exhibition_entity?: Maybe<UpdateExhibitionEntityMutationPayload>;
  update_tag?: Maybe<UpdateTagMutationPayload>;
};


export type MutationAdd_ArtworkArgs = {
  input: AddArtworkMutationInput;
};


export type MutationAdd_Artwork_EntityArgs = {
  input: AddArtworkEntityMutationInput;
};


export type MutationAdd_Artwork_To_TagArgs = {
  input: AddArtworkToTagMutationInput;
};


export type MutationAdd_ExhibitionArgs = {
  input: AddExhibitionMutationInput;
};


export type MutationAdd_Exhibition_EntityArgs = {
  input: AddExhibitionEntityMutationInput;
};


export type MutationAdd_TagArgs = {
  input: AddTagMutationInput;
};


export type MutationDelete_ArtworkArgs = {
  input: DeleteArtworkMutationInput;
};


export type MutationDelete_ExhibitionArgs = {
  input: DeleteExhibitionMutationInput;
};


export type MutationDelete_TagArgs = {
  input: DeleteTagMutationInput;
};


export type MutationGenerate_TokenArgs = {
  input: GenerateTokenMutationInput;
};


export type MutationRemove_Artwork_EntityArgs = {
  input: RemoveArtworkEntityMutationInput;
};


export type MutationRemove_Artwork_From_TagArgs = {
  input: RemoveArtworkFromTagMutationInput;
};


export type MutationRemove_Exhibition_EntityArgs = {
  input: RemoveExhibitionEntityMutationInput;
};


export type MutationRenew_TokenArgs = {
  input: RenewTokenMutationInput;
};


export type MutationReorder_ArtworkArgs = {
  input: ReorderArtworkMutationInput;
};


export type MutationReorder_ImageArgs = {
  input: ReorderImageMutationInput;
};


export type MutationUpdate_ArtworkArgs = {
  input: UpdateArtworkMutationInput;
};


export type MutationUpdate_Artwork_EntityArgs = {
  input: UpdateArtworkEntityMutationInput;
};


export type MutationUpdate_ExhibitionArgs = {
  input: UpdateExhibitionMutationInput;
};


export type MutationUpdate_Exhibition_EntityArgs = {
  input: UpdateExhibitionEntityMutationInput;
};


export type MutationUpdate_TagArgs = {
  input: UpdateTagMutationInput;
};

export enum OrderableAction {
  MoveDown = 'MOVE_DOWN',
  MoveTo = 'MOVE_TO',
  MoveToBottom = 'MOVE_TO_BOTTOM',
  MoveToTop = 'MOVE_TO_TOP',
  MoveUp = 'MOVE_UP'
}

export type PresignedUrlAttributes = {
  file_key: Scalars['String'];
  file_type: Scalars['String'];
};

/** The query root for this schema */
export type Query = {
  __typename?: 'Query';
  /** An artwork */
  artwork: Artwork;
  artworks: Array<Artwork>;
  cv: Cv;
  /** An exhibition */
  exhibition: Exhibition;
  exhibitions: Array<Exhibition>;
  presigned_upload_urls: Array<Scalars['String']>;
  /** System status */
  status: Status;
  /** A tag of artworks */
  tag: Tag;
  tags: Array<Tag>;
};


/** The query root for this schema */
export type QueryArtworkArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryArtworksArgs = {
  query?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Array<InputMaybe<State>>>;
};


/** The query root for this schema */
export type QueryExhibitionArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryExhibitionsArgs = {
  state?: InputMaybe<Array<InputMaybe<State>>>;
};


/** The query root for this schema */
export type QueryPresigned_Upload_UrlsArgs = {
  uploads: Array<PresignedUrlAttributes>;
};


/** The query root for this schema */
export type QueryTagArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryTagsArgs = {
  state?: InputMaybe<Array<InputMaybe<State>>>;
  visibility?: InputMaybe<VisibilityEnum>;
};

/** Autogenerated input type of RemoveArtworkEntityMutation */
export type RemoveArtworkEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: RemoveEntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of RemoveArtworkEntityMutation. */
export type RemoveArtworkEntityMutationPayload = {
  __typename?: 'RemoveArtworkEntityMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveArtworkFromTagMutation */
export type RemoveArtworkFromTagMutationInput = {
  artworkId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  tagId: Scalars['ID'];
};

/** Autogenerated return type of RemoveArtworkFromTagMutation. */
export type RemoveArtworkFromTagMutationPayload = {
  __typename?: 'RemoveArtworkFromTagMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Tag;
};

export type RemoveEntityAttributes = {
  id: Scalars['ID'];
  type: EntityType;
};

/** Autogenerated input type of RemoveExhibitionEntityMutation */
export type RemoveExhibitionEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: RemoveEntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of RemoveExhibitionEntityMutation. */
export type RemoveExhibitionEntityMutationPayload = {
  __typename?: 'RemoveExhibitionEntityMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  exhibition: Exhibition;
};

/** Autogenerated input type of RenewTokenMutation */
export type RenewTokenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The refresh token from a previous authentication */
  refresh_token: Scalars['String'];
};

/** Autogenerated return type of RenewTokenMutation. */
export type RenewTokenMutationPayload = {
  __typename?: 'RenewTokenMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** When the new token expires */
  expires_at?: Maybe<Scalars['String']>;
  /** A new refresh token */
  refresh_token?: Maybe<Scalars['String']>;
  /** The new JWT token if refresh is successful */
  token?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ReorderArtworkMutation */
export type ReorderArtworkMutationInput = {
  action: OrderableAction;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  moveTo?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of ReorderArtworkMutation. */
export type ReorderArtworkMutationPayload = {
  __typename?: 'ReorderArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  query: Query;
};

/** Autogenerated input type of ReorderImageMutation */
export type ReorderImageMutationInput = {
  action: OrderableAction;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  move_to?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of ReorderImageMutation. */
export type ReorderImageMutationPayload = {
  __typename?: 'ReorderImageMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  image: Image;
  query: Query;
};

/** A resized image */
export type ResizedImage = {
  __typename?: 'ResizedImage';
  factor: Scalars['Float'];
  height: Scalars['Int'];
  ratio: Scalars['Float'];
  urls: RetinaImage;
  width: Scalars['Int'];
};

/** A retina image */
export type RetinaImage = {
  __typename?: 'RetinaImage';
  _1x: Scalars['String'];
  _2x: Scalars['String'];
  _3x: Scalars['String'];
};

export enum State {
  Archived = 'ARCHIVED',
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
  Selected = 'SELECTED'
}

/** System status */
export type Status = {
  __typename?: 'Status';
  authenticated: Scalars['Boolean'];
  up: Scalars['Boolean'];
};

/** A collection of artworks */
export type Tag = {
  __typename?: 'Tag';
  artworks: Array<Artwork>;
  created_at: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  slug: Scalars['String'];
  state: State;
  title: Scalars['String'];
  updated_at: Scalars['String'];
  visibility: VisibilityEnum;
};


/** A collection of artworks */
export type TagArtworksArgs = {
  state?: InputMaybe<Array<State>>;
};


/** A collection of artworks */
export type TagCreated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** A collection of artworks */
export type TagDescriptionArgs = {
  format?: InputMaybe<Format>;
};


/** A collection of artworks */
export type TagUpdated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};

/** Attributes for creating a tag */
export type TagAttributes = {
  description?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<State>;
  title: Scalars['String'];
  visibility?: InputMaybe<VisibilityEnum>;
};

export type UpdateArtworkAttributes = {
  depth?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  gloss?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  material?: InputMaybe<Scalars['String']>;
  pitch?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  unit?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Float']>;
  year?: InputMaybe<Scalars['Int']>;
};

export type UpdateArtworkEntityAttributes = {
  attachment?: InputMaybe<UpdateAttachmentAttributes>;
  edition?: InputMaybe<UpdateEditionAttributes>;
  embed?: InputMaybe<UpdateEmbedAttributes>;
  id: Scalars['ID'];
  image?: InputMaybe<UpdateImageAttributes>;
  link?: InputMaybe<UpdateLinkAttributes>;
};

/** Autogenerated input type of UpdateArtworkEntityMutation */
export type UpdateArtworkEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: UpdateArtworkEntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateArtworkEntityMutation. */
export type UpdateArtworkEntityMutationPayload = {
  __typename?: 'UpdateArtworkEntityMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateArtworkMutation */
export type UpdateArtworkMutationInput = {
  attributes: UpdateArtworkAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateArtworkMutation. */
export type UpdateArtworkMutationPayload = {
  __typename?: 'UpdateArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type UpdateAttachmentAttributes = {
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type UpdateEditionAttributes = {
  attributable?: InputMaybe<Scalars['Boolean']>;
  collector?: InputMaybe<Scalars['String']>;
  inventory_number?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Int']>;
  price_currency?: InputMaybe<Currency>;
  production_cost?: InputMaybe<Scalars['Int']>;
  production_cost_currency?: InputMaybe<Currency>;
  sold_date?: InputMaybe<Scalars['ISO8601Date']>;
  sold_price?: InputMaybe<Scalars['Int']>;
  sold_price_currency?: InputMaybe<Currency>;
  state?: InputMaybe<EditionState>;
};

export type UpdateEmbedAttributes = {
  html: Scalars['String'];
};

export type UpdateExhibitionAttributes = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['ISO8601Date']>;
  external_url?: InputMaybe<Scalars['String']>;
  kind?: InputMaybe<ExhibitionKind>;
  start_date?: InputMaybe<Scalars['ISO8601Date']>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  venue?: InputMaybe<Scalars['String']>;
};

export type UpdateExhibitionEntityAttributes = {
  id: Scalars['ID'];
  image?: InputMaybe<UpdateImageAttributes>;
};

/** Autogenerated input type of UpdateExhibitionEntityMutation */
export type UpdateExhibitionEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: UpdateExhibitionEntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateExhibitionEntityMutation. */
export type UpdateExhibitionEntityMutationPayload = {
  __typename?: 'UpdateExhibitionEntityMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  exhibition: Exhibition;
};

/** Autogenerated input type of UpdateExhibitionMutation */
export type UpdateExhibitionMutationInput = {
  attributes: UpdateExhibitionAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateExhibitionMutation. */
export type UpdateExhibitionMutationPayload = {
  __typename?: 'UpdateExhibitionMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  exhibition: Exhibition;
};

export type UpdateImageAttributes = {
  description?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  largest_side_display_size?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type UpdateLinkAttributes = {
  kind?: InputMaybe<Kind>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateTagMutation */
export type UpdateTagMutationInput = {
  attributes: TagAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateTagMutation. */
export type UpdateTagMutationPayload = {
  __typename?: 'UpdateTagMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Tag;
};

/** Visibility options for sets */
export enum VisibilityEnum {
  /** Publicly visible and listed */
  Public = 'PUBLIC',
  /** Publicly visible but not listed */
  Unlisted = 'UNLISTED'
}

export type Meta_ImageFragment = { __typename?: 'Image', resized: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } } };

export type Figure_ImageFragment = { __typename?: 'Image', id: string, width?: number | null, height?: number | null, url: string, title?: string | null, description?: string | null, placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, display: { __typename?: 'ResizedImage', width: number, height: number, srcs: { __typename?: 'RetinaImage', _1x: string, _2x: string } }, zoom: { __typename?: 'ResizedImage', srcs: { __typename?: 'RetinaImage', _1x: string } } };

export type SearchQueryVariables = Exact<{ [key: string]: never; }>;


export type SearchQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', id: string, slug: string, title: string }> };

export type Thumbnail_ImageFragment = { __typename?: 'Image', width?: number | null, height?: number | null, title?: string | null, description?: string | null, url: string, placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, thumb: { __typename?: 'ResizedImage', width: number, height: number, srcs: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } };

export type ThumbnailArtwork_ArtworkFragment = { __typename?: 'Artwork', id: string, slug: string, title: string, material?: string | null, year: number, images: Array<{ __typename?: 'Image', placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, resized: { __typename?: 'ResizedImage', width: number, height: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } }> };

export type Tombstone_ArtworkFragment = { __typename?: 'Artwork', title: string, material?: string | null, duration?: string | null, year: number, collector_byline?: string | null, dimensions?: { __typename?: 'Dimensions', inches: { __typename?: 'Dimension', to_s?: string | null }, centimeters: { __typename?: 'Dimension', to_s?: string | null } } | null };

export type ArtworksShowQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ArtworksShowQuery = { __typename?: 'Query', artwork: { __typename?: 'Artwork', id: string, slug: string, src?: string | null, title: string, year: number, intent: ArtworkIntent, description?: string | null, material?: string | null, duration?: string | null, collector_byline?: string | null, descriptionPlain?: string | null, attachments: Array<{ __typename?: 'Attachment', id: string, url: string, title?: string | null }>, links: Array<{ __typename?: 'Link', title?: string | null, url: string }>, embeds: Array<{ __typename?: 'Embed', id: string, html: string }>, images: Array<{ __typename?: 'Image', id: string, width?: number | null, height?: number | null, url: string, title?: string | null, description?: string | null, placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, display: { __typename?: 'ResizedImage', width: number, height: number, srcs: { __typename?: 'RetinaImage', _1x: string, _2x: string } }, zoom: { __typename?: 'ResizedImage', srcs: { __typename?: 'RetinaImage', _1x: string } }, thumb: { __typename?: 'ResizedImage', width: number, height: number, srcs: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } }>, metaImages: Array<{ __typename?: 'Image', resized: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } } }>, dimensions?: { __typename?: 'Dimensions', inches: { __typename?: 'Dimension', to_s?: string | null }, centimeters: { __typename?: 'Dimension', to_s?: string | null } } | null } };

export type ArtworkSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type ArtworkSlugsQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', slug: string }> };

export type CvPageQueryVariables = Exact<{ [key: string]: never; }>;


export type CvPageQuery = { __typename?: 'Query', cv: { __typename?: 'Cv', categories: Array<{ __typename?: 'CvCategory', name: string, years: Array<{ __typename?: 'CvYear', year: number, entries: Array<{ __typename?: 'CvEntry', title?: string | null, city?: string | null, country?: string | null, notes?: string | null, region?: string | null, url?: string | null, venue?: string | null, to_html: string }> }> }> } };

export type ExhibitionsIndexQueryVariables = Exact<{ [key: string]: never; }>;


export type ExhibitionsIndexQuery = { __typename?: 'Query', exhibitions: Array<{ __typename?: 'Exhibition', id: string, slug: string, title: string, city?: string | null, year?: number | null, images: Array<{ __typename?: 'Image', placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, resized: { __typename?: 'ResizedImage', width: number, height: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } }> }> };

export type ExhibitionsShowQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ExhibitionsShowQuery = { __typename?: 'Query', exhibition: { __typename?: 'Exhibition', title: string, venue?: string | null, city?: string | null, year?: number | null, start_date?: string | null, end_date?: string | null, external_url?: string | null, description?: string | null, start_year?: string | null, end_year?: string | null, descriptionPlain?: string | null, images: Array<{ __typename?: 'Image', id: string, width?: number | null, height?: number | null, title?: string | null, description?: string | null, url: string, placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, thumb: { __typename?: 'ResizedImage', width: number, height: number, srcs: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } }>, metaImages: Array<{ __typename?: 'Image', resized: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } } }> } };

export type ExhibitionSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type ExhibitionSlugsQuery = { __typename?: 'Query', exhibitions: Array<{ __typename?: 'Exhibition', slug: string }> };

export type GlossesQueryVariables = Exact<{ [key: string]: never; }>;


export type GlossesQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', id: string, gloss?: string | null, slug: string }> };

export type ArtworksIndexQueryVariables = Exact<{
  state?: InputMaybe<Array<InputMaybe<State>> | InputMaybe<State>>;
}>;


export type ArtworksIndexQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', id: string, slug: string, title: string, material?: string | null, year: number, images: Array<{ __typename?: 'Image', placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, resized: { __typename?: 'ResizedImage', width: number, height: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } }> }> };

export type ArtworksTableQueryVariables = Exact<{ [key: string]: never; }>;


export type ArtworksTableQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', id: string, slug: string, title: string, material?: string | null, year: number }> };

export type TagShowQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type TagShowQuery = { __typename?: 'Query', tag: { __typename?: 'Tag', id: string, slug: string, description?: string | null, title: string, artworks: Array<{ __typename?: 'Artwork', id: string, slug: string, title: string, material?: string | null, year: number, images: Array<{ __typename?: 'Image', placeholder: { __typename?: 'ResizedImage', urls: { __typename?: 'RetinaImage', src: string } }, resized: { __typename?: 'ResizedImage', width: number, height: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string, _3x: string } } }> }> } };

export type TagSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type TagSlugsQuery = { __typename?: 'Query', tags: Array<{ __typename?: 'Tag', slug: string }> };

export type TagsIndexQueryVariables = Exact<{
  state?: InputMaybe<Array<InputMaybe<State>> | InputMaybe<State>>;
}>;


export type TagsIndexQuery = { __typename?: 'Query', tags: Array<{ __typename?: 'Tag', id: string, title: string, slug: string }> };

export type WebsitesQueryVariables = Exact<{ [key: string]: never; }>;


export type WebsitesQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', id: string, links: Array<{ __typename?: 'Link', kind: Kind, url: string }> }> };

export const Meta_ImageFragmentDoc = gql`
    fragment Meta_image on Image {
  resized(width: 1200, height: 630) {
    urls {
      src: _1x
    }
  }
}
    `;
export const Figure_ImageFragmentDoc = gql`
    fragment Figure_image on Image {
  id
  width
  height
  url
  title
  description
  placeholder: resized(width: 50, height: 50, blur: 10) {
    urls {
      src: _1x
    }
  }
  display: resized(width: 1200, height: 1200) {
    width
    height
    srcs: urls {
      _1x
      _2x
    }
  }
  zoom: resized(width: 4000, height: 4000, quality: 60) {
    srcs: urls {
      _1x
    }
  }
}
    `;
export const Thumbnail_ImageFragmentDoc = gql`
    fragment Thumbnail_image on Image {
  width
  height
  title
  description
  url
  placeholder: resized(width: 50, height: 50, blur: 10) {
    urls {
      src: _1x
    }
  }
  thumb: resized(width: 200, height: 200) {
    width
    height
    srcs: urls {
      _1x
      _2x
      _3x
    }
  }
}
    `;
export const ThumbnailArtwork_ArtworkFragmentDoc = gql`
    fragment ThumbnailArtwork_artwork on Artwork {
  id
  slug
  title
  material
  year
  images(limit: 1, state: PUBLISHED) {
    placeholder: resized(width: 50, height: 50, blur: 10) {
      urls {
        src: _1x
      }
    }
    resized(width: 200, height: 200) {
      width
      height
      urls {
        _1x
        _2x
        _3x
      }
    }
  }
}
    `;
export const Tombstone_ArtworkFragmentDoc = gql`
    fragment Tombstone_artwork on Artwork {
  title
  material
  duration
  year
  dimensions {
    inches {
      to_s
    }
    centimeters {
      to_s
    }
  }
  collector_byline
}
    `;
export const SearchQueryDocument = gql`
    query SearchQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    slug
    title
  }
}
    `;

export function useSearchQuery(options?: Omit<Urql.UseQueryArgs<SearchQueryVariables>, 'query'>) {
  return Urql.useQuery<SearchQuery, SearchQueryVariables>({ query: SearchQueryDocument, ...options });
};
export const ArtworksShowQueryDocument = gql`
    query ArtworksShowQuery($id: ID!) {
  artwork(id: $id) {
    ...Tombstone_artwork
    id
    slug
    src
    title
    year
    intent
    description(format: HTML)
    descriptionPlain: description(format: PLAIN)
    attachments {
      id
      url
      title
    }
    links(kind: DEFAULT, state: PUBLISHED) {
      title
      url
    }
    embeds {
      id
      html
    }
    images(state: [SELECTED, PUBLISHED]) {
      id
      ...Figure_image
      ...Thumbnail_image
    }
    metaImages: images(state: PUBLISHED, limit: 1) {
      ...Meta_image
    }
  }
}
    ${Tombstone_ArtworkFragmentDoc}
${Figure_ImageFragmentDoc}
${Thumbnail_ImageFragmentDoc}
${Meta_ImageFragmentDoc}`;

export function useArtworksShowQuery(options: Omit<Urql.UseQueryArgs<ArtworksShowQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworksShowQuery, ArtworksShowQueryVariables>({ query: ArtworksShowQueryDocument, ...options });
};
export const ArtworkSlugsQueryDocument = gql`
    query ArtworkSlugsQuery {
  artworks {
    slug
  }
}
    `;

export function useArtworkSlugsQuery(options?: Omit<Urql.UseQueryArgs<ArtworkSlugsQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworkSlugsQuery, ArtworkSlugsQueryVariables>({ query: ArtworkSlugsQueryDocument, ...options });
};
export const CvPageQueryDocument = gql`
    query CvPageQuery {
  cv {
    categories {
      name
      years {
        year
        entries {
          title
          city
          country
          notes
          region
          url
          venue
          to_html
        }
      }
    }
  }
}
    `;

export function useCvPageQuery(options?: Omit<Urql.UseQueryArgs<CvPageQueryVariables>, 'query'>) {
  return Urql.useQuery<CvPageQuery, CvPageQueryVariables>({ query: CvPageQueryDocument, ...options });
};
export const ExhibitionsIndexQueryDocument = gql`
    query ExhibitionsIndexQuery {
  exhibitions(state: [SELECTED, PUBLISHED]) {
    id
    slug
    title
    city
    year
    images(limit: 1, state: PUBLISHED) {
      placeholder: resized(width: 50, height: 50, blur: 10) {
        urls {
          src: _1x
        }
      }
      resized(width: 200, height: 200) {
        width
        height
        urls {
          _1x
          _2x
          _3x
        }
      }
    }
  }
}
    `;

export function useExhibitionsIndexQuery(options?: Omit<Urql.UseQueryArgs<ExhibitionsIndexQueryVariables>, 'query'>) {
  return Urql.useQuery<ExhibitionsIndexQuery, ExhibitionsIndexQueryVariables>({ query: ExhibitionsIndexQueryDocument, ...options });
};
export const ExhibitionsShowQueryDocument = gql`
    query ExhibitionsShowQuery($id: ID!) {
  exhibition(id: $id) {
    title
    venue
    city
    year
    start_date(format: "%B %e")
    end_date(format: "%B %e")
    start_year: start_date(format: "%Y")
    end_year: end_date(format: "%Y")
    external_url
    description(format: HTML)
    descriptionPlain: description(format: PLAIN)
    images(state: [SELECTED, PUBLISHED]) {
      id
      ...Thumbnail_image
    }
    metaImages: images(state: [SELECTED, PUBLISHED], limit: 1) {
      ...Meta_image
    }
  }
}
    ${Thumbnail_ImageFragmentDoc}
${Meta_ImageFragmentDoc}`;

export function useExhibitionsShowQuery(options: Omit<Urql.UseQueryArgs<ExhibitionsShowQueryVariables>, 'query'>) {
  return Urql.useQuery<ExhibitionsShowQuery, ExhibitionsShowQueryVariables>({ query: ExhibitionsShowQueryDocument, ...options });
};
export const ExhibitionSlugsQueryDocument = gql`
    query ExhibitionSlugsQuery {
  exhibitions {
    slug
  }
}
    `;

export function useExhibitionSlugsQuery(options?: Omit<Urql.UseQueryArgs<ExhibitionSlugsQueryVariables>, 'query'>) {
  return Urql.useQuery<ExhibitionSlugsQuery, ExhibitionSlugsQueryVariables>({ query: ExhibitionSlugsQueryDocument, ...options });
};
export const GlossesQueryDocument = gql`
    query GlossesQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    gloss
    slug
  }
}
    `;

export function useGlossesQuery(options?: Omit<Urql.UseQueryArgs<GlossesQueryVariables>, 'query'>) {
  return Urql.useQuery<GlossesQuery, GlossesQueryVariables>({ query: GlossesQueryDocument, ...options });
};
export const ArtworksIndexQueryDocument = gql`
    query ArtworksIndexQuery($state: [State]) {
  artworks(state: $state) {
    id
    ...ThumbnailArtwork_artwork
  }
}
    ${ThumbnailArtwork_ArtworkFragmentDoc}`;

export function useArtworksIndexQuery(options?: Omit<Urql.UseQueryArgs<ArtworksIndexQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworksIndexQuery, ArtworksIndexQueryVariables>({ query: ArtworksIndexQueryDocument, ...options });
};
export const ArtworksTableQueryDocument = gql`
    query ArtworksTableQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    slug
    title
    material
    year
  }
}
    `;

export function useArtworksTableQuery(options?: Omit<Urql.UseQueryArgs<ArtworksTableQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworksTableQuery, ArtworksTableQueryVariables>({ query: ArtworksTableQueryDocument, ...options });
};
export const TagShowQueryDocument = gql`
    query TagShowQuery($id: ID!) {
  tag(id: $id) {
    id
    slug
    description(format: HTML)
    title
    artworks {
      id
      ...ThumbnailArtwork_artwork
    }
  }
}
    ${ThumbnailArtwork_ArtworkFragmentDoc}`;

export function useTagShowQuery(options: Omit<Urql.UseQueryArgs<TagShowQueryVariables>, 'query'>) {
  return Urql.useQuery<TagShowQuery, TagShowQueryVariables>({ query: TagShowQueryDocument, ...options });
};
export const TagSlugsQueryDocument = gql`
    query TagSlugsQuery {
  tags {
    slug
  }
}
    `;

export function useTagSlugsQuery(options?: Omit<Urql.UseQueryArgs<TagSlugsQueryVariables>, 'query'>) {
  return Urql.useQuery<TagSlugsQuery, TagSlugsQueryVariables>({ query: TagSlugsQueryDocument, ...options });
};
export const TagsIndexQueryDocument = gql`
    query TagsIndexQuery($state: [State]) {
  tags(state: $state, visibility: PUBLIC) {
    id
    title
    slug
  }
}
    `;

export function useTagsIndexQuery(options?: Omit<Urql.UseQueryArgs<TagsIndexQueryVariables>, 'query'>) {
  return Urql.useQuery<TagsIndexQuery, TagsIndexQueryVariables>({ query: TagsIndexQueryDocument, ...options });
};
export const WebsitesQueryDocument = gql`
    query WebsitesQuery {
  artworks(state: [SELECTED, PUBLISHED]) {
    id
    links {
      kind
      url
    }
  }
}
    `;

export function useWebsitesQuery(options?: Omit<Urql.UseQueryArgs<WebsitesQueryVariables>, 'query'>) {
  return Urql.useQuery<WebsitesQuery, WebsitesQueryVariables>({ query: WebsitesQueryDocument, ...options });
};